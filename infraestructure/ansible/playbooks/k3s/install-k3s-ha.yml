---
- name: Bootstrap first k3s control plane node
  hosts: k3s_control_plane[0]
  become: yes
  vars_files:
    - group_vars/all.yml
  tasks:

    - name: Install k3s with cluster-init
      shell: |
        curl -sfL https://get.k3s.io | INSTALL_K3S_EXEC="server --cluster-init" INSTALL_K3S_VERSION={{ k3s_version }} sh -
      args:
        creates: /etc/systemd/system/k3s.service

    - name: Wait for k3s token file to exist
      wait_for:
        path: /var/lib/rancher/k3s/server/node-token
        state: present
        timeout: 30

    - name: Get K3S token from the first node
      shell: cat /var/lib/rancher/k3s/server/node-token
      register: k3s_token_result
      run_once: true

    - name: Set token fact for the first host
      set_fact:
        k3s_token: "{{ k3s_token_result.stdout | trim }}"
      run_once: true

- name: Join additional control plane nodes
  hosts: k3s_control_plane[1:]
  become: yes
  vars_files:
    - group_vars/all.yml

  tasks:

    - name: Debug token before join
      debug:
        msg: "K3S Token before join: {{ hostvars[groups['k3s_control_plane'][0]].k3s_token }}"

    - name: Install k3s and join control plane
      shell: |
        curl -sfL https://get.k3s.io | \
          INSTALL_K3S_EXEC="server --server https://{{ groups['k3s_control_plane'][0] }}:6443" \
          INSTALL_K3S_VERSION={{ k3s_version }} \
          K3S_TOKEN="{{ hostvars[groups['k3s_control_plane'][0]].k3s_token }}" \
          sh -
      become: yes

    - name: Restart k3s
      systemd:
        name: k3s
        state: restarted

- name: Ensure the k3s service is running on all nodes
  hosts: k3s_control_plane
  become: yes
  tasks:
    - name: Check k3s service status
      systemd:
        name: k3s
        state: started
        enabled: yes
